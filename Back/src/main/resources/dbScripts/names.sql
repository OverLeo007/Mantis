CREATE TABLE IF NOT EXISTS users
(
    user_id      INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, -- Уникальный идентификатор пользователя
    username     VARCHAR(255) NOT NULL UNIQUE,                     -- Логин пользователя
    email        VARCHAR(255) NOT NULL,                            -- Почта пользователя
    usr_password VARCHAR(255) NOT NULL,                            -- Пароль пользователя
    preferences  jsonb                                             -- Индивидуальные настройки пользователя
);
CREATE TABLE boards
(
    board_id  INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, -- Уникальный идентификатор доски
    title     VARCHAR(255) NOT NULL,                            -- Название доски
    last_edit TIMESTAMP                                         -- Время последнего изменения
);
CREATE TABLE lists
(
    list_id       INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, -- Уникальный идентификатор списка
    title         VARCHAR(255) NOT NULL,                            -- Название списка
    list_position INTEGER,                                          -- Порядковый номер списка на доске
    board_id      INTEGER REFERENCES boards (board_id)              -- Ссылка на доску, на которой находится список
);
CREATE TABLE tasks
(
    task_id          INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, -- Уникальный идентификатор записи
    task_text        TEXT,                                             -- Текст записи
    task_position    INTEGER,                                          -- Порядковый номер записи в списке
    list_id          INTEGER REFERENCES lists (list_id),               -- Ссылка на список, в котором находится запись
    due_date         DATE,                                             -- Срок выполнения записи
    task_doer_id     INTEGER REFERENCES users (user_id),               -- Человек, назначенный на выполнение карточки
    task_preferences jsonb                                             -- Дополнительные настройки карточки
);
CREATE TABLE labels
(
    label_id   INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, -- Уникальный идентификатор метки
    title      VARCHAR(255),                                     -- Название метки
    label_info VARCHAR(255)                                      -- Информация о метке
);
CREATE TABLE comments
(
    comment_id   INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,      -- Уникальный идентификатор комментария
    task_id      INTEGER REFERENCES tasks (task_id) ON DELETE CASCADE,  -- Ссылка на запись, которую комментируют
    user_id      INTEGER REFERENCES users (user_id) ON DELETE SET NULL, -- Ссылка на пользователя, который оставил комментарий
    comment_text TEXT,                                                  -- Текст комментария
    comment_date TIMESTAMP                                              -- Дата и время комментария
);
CREATE TABLE roles
(
    role_id          INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, -- Уникальный идентификатор роли
    board_id         INTEGER REFERENCES boards (board_id),             -- Ссылка на доску
    role_name        VARCHAR(50),                                      -- Название роли
    role_permissions jsonb                                             -- Права роли в формате JSONB
);
CREATE TABLE board_users
(
    user_id  INTEGER REFERENCES users (user_id) ON DELETE CASCADE,   -- Идентификатор пользователя, связанный с таблицей users
    board_id INTEGER REFERENCES boards (board_id) ON DELETE CASCADE, -- Идентификатор доски, связанный с таблицей boards
    PRIMARY KEY (user_id, board_id)
);
CREATE TABLE user_roles
(
    user_id INTEGER REFERENCES users (user_id) ON DELETE CASCADE, -- Идентификатор пользователя, связанный с таблицей users
    role_id INTEGER REFERENCES roles (role_id) ON DELETE CASCADE, -- Идентификатор роли, связанный с таблицей roles
    PRIMARY KEY (user_id, role_id)                                -- Определяем составной первичный ключ (user_id, role_id)
);
CREATE TABLE task_labels
(
    task_id  INTEGER REFERENCES tasks (task_id) ON DELETE CASCADE,   -- Идентификатор задачи, связанный с таблицей tasks
    label_id INTEGER REFERENCES labels (label_id) ON DELETE CASCADE, -- Идентификатор метки, связанный с таблицей labels
    PRIMARY KEY (task_id, label_id)                                  -- Определяем составной первичный ключ (task_id, label_id)
);